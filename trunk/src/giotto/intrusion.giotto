/**
Intrusion Detection

@author Taylor Johnson
*/

/////////////////////////////////////////////////////////////////////////
////                         sensors                                 ////

sensor
	c_int	portLight	uses	c_get_light_sensor;
	c_int	portSonar	uses	c_get_sonar_sensor;

/////////////////////////////////////////////////////////////////////////
////                         actuators                               ////

actuator
	c_int	actMotorSonar	uses	c_set_motor_sonar_speed;	

/////////////////////////////////////////////////////////////////////////
////                        output ports                             ////

output
	c_int 	portMotorSonar	:= c_zero;
	c_bool	portFound	:= c_false;	//has an intruder been found (location)?
	c_bool	portIntrusion	:= c_false;	//has an intruder been detected (past boundary)?
	c_int	portAngle	:= c_zero;	//motor current angle
	c_int	portDistance	:= c_zero;	//distance to target
	c_int	portLightO	:= c_zero;	//light
	c_int	portSonarO	:= c_zero;	//sonar

/////////////////////////////////////////////////////////////////////////
////                         tasks                                   ////

task guardTask(c_bool intrusion, c_int light)
	output (portIntrusion, portLightO) state (c_bool stateintrusion := c_false) {
		schedule c_guard_task(intrusion, portIntrusion, light, portLightO, stateintrusion)
}

task searchTask(c_bool found, c_int sonar)
	output (portFound, portSonarO) state (c_bool statefound := c_false) {
		schedule c_search_task(found, statefound, portFound, sonar, portSonarO)
}

/////////////////////////////////////////////////////////////////////////
////                    actuator drivers                             ////
driver driverSonarMotor(portMotorSonar)
	output (c_int motorSonar) {
    if c_true() then c_int_to_int(portMotorSonar, motorSonar)
}

/////////////////////////////////////////////////////////////////////////
////                    input drivers                                ////

driver driverIntrusionStatus (portIntrusion, portLight)
	output (c_bool intrusionValue, c_int lightValue) {
	if c_true() then
		c_bool_to_bool_and_int_to_int(intrusionValue, portIntrusion, portLight, lightValue)
}

driver driverSearchStatus (portFound, portSonar)
	output (c_bool foundValue, c_int sonarValue) {
	if c_true() then
		c_bool_to_bool_and_int_to_int(portFound, foundValue, portSonar, sonarValue)
}

//driver driverLightStatus (portLight)
//	output (c_int lightValue) {
//	if c_true() then
//		c_int_to_int(portLight, lightValue)
//}

//driver driverSonarStatus (portAngle, portDistance)
//       output (c_int angleValue, c_int distanceValue) {
//    if c_true() then
//       c_int_to_int(portAngle, portDistance, angleValue, distanceValue)
//}

/////////////////////////////////////////////////////////////////////////
////                    mode switch drivers                          ////

driver driverGuardToSearch(portIntrusion) 
	output (c_int intrusion_state) {
	if c_ready_to_search(portIntrusion) then c_switch_mode(intrusion_state)
}

driver driverSearchToGuard(portFound) 
	output (c_int found_state) {
	if c_ready_to_guard(portFound) then c_switch_mode(found_state)
}


start guard {

	mode guard(portMotorSonar) period 1000 {
		actfreq 1 do actMotorSonar(driverSonarMotor);

		exitfreq 1 do search(driverGuardToSearch);

		taskfreq 10 do guardTask(driverIntrusionStatus);
	}

	mode search(portMotorSonar) period 1000 {
		actfreq 1 do actMotorSonar(driverSonarMotor);

		exitfreq 1 do guard(driverSearchToGuard);

		taskfreq 1 do searchTask(driverSearchStatus);
	}
}
