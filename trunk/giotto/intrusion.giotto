/**
Intrusion Detection

@author Taylor Johnson
*/

/////////////////////////////////////////////////////////////////////////
////                         sensors                                 ////

sensor
	real_port	portLight	uses	getLight;
	real_port	portSonar	uses	getSonar;

/////////////////////////////////////////////////////////////////////////
////                         actuators                               ////

actuator
	real_port	portMotorSonar	uses	setMotorSpeed;

/////////////////////////////////////////////////////////////////////////
////                        output ports                             ////

output
	bool_port	portFound	:= false;	//has an intruder been found (location)?
	bool_port	portIntrusion	:= false;	//has an intruder been detected (past boundary)?
	real_port	portAngle	:= real_zero;	//motor current angle (
	real_port	portDistance	:= real_zero;	//distance to target

/////////////////////////////////////////////////////////////////////////
////                         tasks                                   ////

task guardTask(bool_port intrusion)
	output (portIntrusion) state () {
		schedule guard()
}

task searchTask(bool_port found)
	output (portFound) state () {
		schedule search()
}

/////////////////////////////////////////////////////////////////////////
////                    actuator drivers                             ////


driver driverSonarMotor(portAngle)
	output (real_port portMotorSpeed) {
    if constant_true() then ecrobotor_set_motor_speed()
}


/////////////////////////////////////////////////////////////////////////
////                    input drivers                                ////

driver driverLightStatus (portLight)
	output (real_port lightValue) {
	if constant_true() then
		copy_real_port(lightValue, portLight)
}

driver driverSonarStatus (portAngle, portDistance)
       output (real_port angleValue, real_port distanceValue) {
    if constant_true() then
       copy_real_port2(angleValue, distanceValue, portAngle, portDistance)
}

/////////////////////////////////////////////////////////////////////////
////                    mode switch drivers                          ////

driver driverGuardToSearch (portIntrusion) 
	output () {
	if readyToSearch() then dummy()
}

start guard {

    mode guard() period 50 {

    }

    mode search() period 1000 {

    }
}
